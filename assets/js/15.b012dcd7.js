(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{157:function(t,s,a){t.exports=a.p+"assets/img/renderTree.5998c830.png"},197:function(t,s,a){"use strict";a.r(s);var e=a(0),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h3",{attrs:{id:"什么是回流与重绘？有什么区别？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是回流与重绘？有什么区别？"}},[t._v("#")]),t._v(" 什么是回流与重绘？有什么区别？")]),t._v(" "),e("h4",{attrs:{id:"浏览器的渲染过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器的渲染过程"}},[t._v("#")]),t._v(" 浏览器的渲染过程")]),t._v(" "),e("p",[e("img",{attrs:{src:a(157),alt:"浏览器生成renderTree"}})]),t._v(" "),e("h4",{attrs:{id:"html加载时到底发生了什么？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#html加载时到底发生了什么？"}},[t._v("#")]),t._v(" html加载时到底发生了什么？")]),t._v(" "),e("ul",[e("li",[t._v("首先，浏览器把获取到的HTML代码解析成1个DOM树，DOM树里包含了所有HTML标签，包括display:none隐藏，还有用JS动态添加的元素等，即DOM Tree。")]),t._v(" "),e("li",[t._v("浏览器把所有样式解析成样式结构体，即CSSDOM Tree。")]),t._v(" "),e("li",[t._v("DOM Tree 和样式结构体组合后构建Render Tree。")]),t._v(" "),e("li",[e("strong",[t._v("注意")]),t._v("："),e("br"),t._v("\nrender tree类似于DOM tree，但区别很大，因为render tree能识别样式，render tree中每个NODE都有自己的style，而且render tree "),e("strong",[t._v("不包含隐藏的节点")]),t._v(" (比如display:none的节点，还有head节点)，因为这些节点不会用于呈现，而且不会影响呈现的，所以就 "),e("strong",[t._v("不会包含到 render tree中")]),t._v("。我自己简单的理解就是DOM Tree和我们写的CSS结合在一起之后，渲染出了render tree。")])]),t._v(" "),e("h4",{attrs:{id:"什么是回流？-又名重排-reflow"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是回流？-又名重排-reflow"}},[t._v("#")]),t._v(" 什么是回流？ 又名重排  reflow")]),t._v(" "),e("p",[t._v("将可见DOM节点以及它对应的样式结合起来，可是我们还需要计算它们在设备视口(viewport)内的确切位置和大小，这个计算的阶段就是回流！"),e("br"),t._v("\n即：")]),t._v(" "),e("ul",[e("li",[t._v("当render tree中的一部分(或全部)因为元素的规模尺寸，布局，隐藏等改变而需要重新构建。这就称为回流(reflow)。")]),t._v(" "),e("li",[t._v("每个页面至少需要一次回流，就是在页面第一次加载的时候，这时候是一定会发生回流的，因为要构建render tree。")]),t._v(" "),e("li",[t._v("在回流的时候，浏览器会使渲染树中受到影响的部分失效，并重新构造这部分渲染树，完成回流后，浏览器会重新绘制受影响的部分到屏幕中，该过程成为重绘。")])]),t._v(" "),e("h4",{attrs:{id:"什么是重绘？-repaint"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是重绘？-repaint"}},[t._v("#")]),t._v(" 什么是重绘？ repaint")]),t._v(" "),e("p",[t._v("当render tree中的一些元素需要更新属性，而这些属性只是影响元素的外观，风格，而不会影响布局的，比如background-color。则就叫称为重绘。")]),t._v(" "),e("h4",{attrs:{id:"有什么区别？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#有什么区别？"}},[t._v("#")]),t._v(" 有什么区别？")]),t._v(" "),e("ol",[e("li",[e("strong",[t._v("回流必将引起重绘，而重绘不一定会引起回流！")]),e("br"),t._v("\neg：只有颜色改变的时候就只会发生重绘而不会引起回流")]),t._v(" "),e("li",[e("strong",[t._v("当页面布局和几何属性改变时就需要回流！")]),e("br"),t._v("\neg：添加或者删除可见的DOM元素，元素位置改变，元素尺寸改变——边距、填充、边框、宽度和高度，内容改变")])]),t._v(" "),e("h4",{attrs:{id:"什么情况会发生回流？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么情况会发生回流？"}},[t._v("#")]),t._v(" 什么情况会发生回流？")]),t._v(" "),e("p",[t._v("回流这一阶段主要是计算节点的位置和几何信息，那么当页面布局和几何信息发生变化的时候，就需要回流。")]),t._v(" "),e("ul",[e("li",[t._v("添加或删除可见的DOM元素")]),t._v(" "),e("li",[t._v("元素的位置发生变化")]),t._v(" "),e("li",[t._v("元素的尺寸发生变化（包括外边距、内边框、边框大小、高度和宽度等）")]),t._v(" "),e("li",[t._v("内容发生变化，比如文本变化或图片被另一个不同尺寸的图片所替代。")]),t._v(" "),e("li",[t._v("页面一开始渲染的时候（这肯定避免不了）")]),t._v(" "),e("li",[t._v("浏览器的窗口尺寸变化（因为回流是根据视口的大小来计算元素的位置和大小的）")])]),t._v(" "),e("h3",{attrs:{id:"注意：回流一定会触发重绘，而重绘不一定会回流"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#注意：回流一定会触发重绘，而重绘不一定会回流"}},[t._v("#")]),t._v(" 注意：回流一定会触发重绘，而重绘不一定会回流")]),t._v(" "),e("h3",{attrs:{id:"扩展篇："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#扩展篇："}},[t._v("#")]),t._v(" 扩展篇：")]),t._v(" "),e("h4",{attrs:{id:"浏览器的优化机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器的优化机制"}},[t._v("#")]),t._v(" 浏览器的优化机制")]),t._v(" "),e("p",[t._v("由上可知：回流比重绘的代价要更高，回流的花销跟render tree有多少节点需要重新构建有关系！！")]),t._v(" "),e("p",[t._v("因为这些机制的存在，所以浏览器会帮助我们优化这些操作，浏览器会维护1个队列，把所有会引起回流、重绘的操作放入这个队列，等队列中的操作到了一定的数量或者到了一定的时间间隔，浏览器就会flush队列，进行一个批处理。这样就会让多次的回流、重绘变成一次回流重绘。")]),t._v(" "),e("p",[t._v("有点类似防抖节流的意思！！")]),t._v(" "),e("h4",{attrs:{id:"自己优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自己优化"}},[t._v("#")]),t._v(" 自己优化")]),t._v(" "),e("p",[t._v("由于重绘和重排可能代价比较昂贵，因此最好就是可以减少它的发生次数。为了减少发生次数，我们可以合并多次对DOM和样式的修改，然后一次处理掉。"),e("br"),t._v("\neg:")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" el "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'test'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nel"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("style"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("padding "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'5px'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nel"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("style"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("borderLeft "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1px'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nel"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("style"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("borderRight "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2px'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("实例中：三个样式属性被修改了，每一个都会影响元素的几何结构，引起回流。当然，大部分现代浏览器都对其做了优化，因此，只会触发一次重排。但是如果在旧版的浏览器或者在上面代码执行的时候，有其他代码访问了布局信息(上文中的会触发回流的布局信息)，那么就会导致三次重排。")]),t._v(" "),e("p",[t._v("因此，我们可以合并所有的改变然后依次处理，比如我们可以采取以下的方式：")]),t._v(" "),e("ul",[e("li",[t._v("使用cssText")])]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" el "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'test'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nel"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("style"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cssText "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'border-left: 1px; border-right: 2px; padding: 5px;'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("ul",[e("li",[t._v("修改CSS的class")])]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" el "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'test'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nel"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("className "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("' active'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h4",{attrs:{id:"其次，批量修改dom、css3硬件加速（gpu加速）、复杂动画效果-使用绝对定位让其脱离文档流-等操作都可以减少回流与重绘的发生！！"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#其次，批量修改dom、css3硬件加速（gpu加速）、复杂动画效果-使用绝对定位让其脱离文档流-等操作都可以减少回流与重绘的发生！！"}},[t._v("#")]),t._v(" 其次，批量修改DOM、css3硬件加速（GPU加速）、复杂动画效果,使用绝对定位让其脱离文档流 等操作都可以减少回流与重绘的发生！！")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://segmentfault.com/a/1190000017329980#item-4-7",target:"_blank",rel:"noopener noreferrer"}},[t._v("实例做法参考"),e("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=r.exports}}]);